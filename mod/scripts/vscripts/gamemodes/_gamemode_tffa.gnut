// literally just ttdm paste

global function GamemodeTFFA_Init

const float TFFAIntroLength = 15.0

// modified: for saving player's score in ffa, don't let mid-game joined players get illegal scores

struct
{
	table<entity, int> ffaPlayerScore
	table<entity, int> playerSavedTitanDamage
} file

void function GamemodeTFFA_Init()
{
	SetSpawnpointGamemodeOverride( FFA )
	Riff_ForceSetSpawnAsTitan( eSpawnAsTitan.Always )
	Riff_ForceTitanExitEnabled( eTitanExitEnabled.Never )
	TrackTitanDamageInPlayerGameStat( PGS_ASSAULT_SCORE )
	ScoreEvent_SetupEarnMeterValuesForMixedModes()
	SetLoadoutGracePeriodEnabled( false )

	// northstar missing
	FlagSet( "IgnoreStartSpawn" ) // ffa gamemodes should always set this
	SetUpTFFAScoreEvents()

	ClassicMP_SetCustomIntro( TFFAIntroSetup, TFFAIntroLength )

	// titan damage scoring
	if ( GetCurrentPlaylistVarInt( "titan_damage_score", 0 ) )
	{
		AddPostDamageCallback( "player", AddScoreOnTitanPostDamage )
		AddPostDamageCallback( "npc_titan", AddScoreOnTitanPostDamage )
	}
	else // titan kill scoring
		AddCallback_OnPlayerKilled( AddTeamScoreForPlayerKilled ) // dont have to track autotitan kills since you cant leave your titan in this mode

	// modified
	AddCallback_OnClientConnected( OnClientConnected )
}

// northstar missing
void function SetUpTFFAScoreEvents()
{
	// pilot kill: 15% for titans
	// titan kill: 0%
	// titan assist: 0%
	// execution: 0%
	ScoreEvent_SetEarnMeterValues( "KillPilot", 0.0, 0.15, 1.0 )
	ScoreEvent_SetEarnMeterValues( "KillTitan", 0.0, 0.0 )
	ScoreEvent_SetEarnMeterValues( "KillAutoTitan", 0.0, 0.0 )
	ScoreEvent_SetEarnMeterValues( "TitanKillTitan", 0.0, 0.0 )
	ScoreEvent_SetEarnMeterValues( "TitanAssist", 0.0, 0.0 )
	ScoreEvent_SetEarnMeterValues( "Execution", 0.0, 0.0 )
}

void function TFFAIntroSetup()
{
	// this should show intermission cam for 15 sec in prematch, before spawning players as titans
	AddCallback_GameStateEnter( eGameState.Prematch, TFFAIntroStart )
	//AddCallback_OnClientConnected( TFFAIntroShowIntermissionCam )
	// vanilla behavior...
	AddCallback_GameStateEnter( eGameState.Playing, TFFAGameStart )
	AddCallback_OnClientConnected( TFFAIntroConntectedPlayer )
}

void function TFFAIntroStart()
{
	thread TFFAIntroStartThreaded()
}

void function TFFAIntroStartThreaded()
{
	ClassicMP_OnIntroStarted()

	foreach ( entity player in GetPlayerArray() )
	{
		if ( !IsPrivateMatchSpectator( player ) )
			TFFAIntroShowIntermissionCam( player )
		else
			RespawnPrivateMatchSpectator( player )
	}
		
	wait TFFAIntroLength
	
	ClassicMP_OnIntroFinished()
}

void function TFFAIntroShowIntermissionCam( entity player )
{
	// vanilla behavior
	//if ( GetGameState() != eGameState.Prematch )
	//	return
	
	thread PlayerWatchesTFFAIntroIntermissionCam( player )
}

// vanilla behavior
void function TFFAGameStart()
{
	foreach ( entity player in GetPlayerArray_Alive() )
	{
		TryGameModeAnnouncement( player ) // announce players whose already alive
		player.UnfreezeControlsOnServer() // if a player is alive they must be freezed, unfreeze them
	}
}

void function TFFAIntroConntectedPlayer( entity player )
{
	if ( GetGameState() != eGameState.Prematch )
		return
		
	thread TFFAIntroConntectedPlayer( player )
}

void function TFFAIntroConntectedPlayer_Threaded( entity player )
{
	player.EndSignal( "OnDestroy" )

	RespawnAsTitan( player, false )
	if ( GetGameState() == eGameState.Prematch ) // still in intro
		player.FreezeControlsOnServer() // freeze
	else if ( GetGameState() == eGameState.Playing ) // they may connect near the end of intro
		TryGameModeAnnouncement( player )
}

void function PlayerWatchesTFFAIntroIntermissionCam( entity player )
{
	ScreenFadeFromBlack( player )

	entity intermissionCam = GetEntArrayByClass_Expensive( "info_intermission" )[ 0 ]

	// the angle set here seems sorta inconsistent as to whether it actually works or just stays at 0 for some reason
	player.SetObserverModeStaticPosition( intermissionCam.GetOrigin() )
	player.SetObserverModeStaticAngles( intermissionCam.GetAngles() )
	player.StartObserverMode( OBS_MODE_STATIC_LOCKED )

	wait TFFAIntroLength

	if ( !IsValid( player ) ) // if player leaves during the intro sequence
		return

	RespawnAsTitan( player, false )
	TryGameModeAnnouncement( player )
}

void function AddTeamScoreForPlayerKilled( entity victim, entity attacker, var damageInfo )
{
	if ( victim != attacker && victim.IsPlayer() && attacker.IsPlayer() && GetGameState() == eGameState.Playing )
	{
		// use AddFFAPlayerScore() for better handling
		//AddTeamScore( attacker.GetTeam(), 1 )
		// why isn't this PGS_SCORE? odd game
		//attacker.AddToPlayerGameStat( PGS_ASSAULT_SCORE, 1 )

		// modified
		AddFFAPlayerTeamScore( attacker, 1 )
	}
}

// titan damage scoring system
void function AddScoreOnTitanPostDamage( entity victim, var damageInfo )
{
	if ( !victim.IsTitan() )
		return

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( attacker == victim ) // self damage, no need to run following calculations
		return
	if ( !attacker.IsPlayer() ) // attacker is not a player
		return

	int damageAmount = CalculateTitanDamageTaken( victim, damageInfo ) // modified function in _base_gametype_mp.gnut
	if ( damageAmount == 0 )
		return

	// calculate damage segment, so we don't display too much on scoreboard
	int damageSegment = GetCurrentPlaylistVarInt( "damage_score_segment", 7500 )
	// sometimes damage is not enough to add 1 point, we save the damage for player's next attack
	file.playerSavedTitanDamage[ attacker ] += damageAmount
	if ( file.playerSavedTitanDamage[ attacker ] < damageSegment )
		return // they can't earn score from this shot
	// calculate score earned
	int scoreAmount = file.playerSavedTitanDamage[ attacker ] / damageSegment
	// remove from saved damage
	int savedDamageLeft = file.playerSavedTitanDamage[ attacker ] % damageSegment
	file.playerSavedTitanDamage[ attacker ] = savedDamageLeft

	// add to score!
	AddFFAPlayerTeamScore( attacker, scoreAmount )
}

// modified
void function AddFFAPlayerTeamScore( entity player, int scoreAmount )
{
	AddTeamScore( player.GetTeam(), scoreAmount ) // add to team score
	file.ffaPlayerScore[ player ] += scoreAmount // add for later we clean up
}

void function OnClientConnected( entity player )
{
	file.ffaPlayerScore[ player ] <- 0
	file.playerSavedTitanDamage[ player ] <- 0
	thread FFAPlayerScoreThink( player ) // good to have this! instead of DisconnectCallback this could handle a null player
}

void function FFAPlayerScoreThink( entity player )
{
	player.EndSignal( "OnDestroy" ) // this can handle disconnecting

	table results = {
		team = player.GetTeam()
		score = 0
	}

	OnThreadEnd
	(
		function(): ( results )
		{
			int team = expect int( results.team )
			int score = expect int( results.score )
			if ( GetGameState() == eGameState.Playing ) // game still playing, we remove score from this player
				AddTeamScore( team, -score )
			if ( GetPlayerArrayOfTeam( team ).len() == 0 ) // all player of this team has disconnected!
				AddTeamScore( team, -GameRules_GetTeamScore( team ) ) // remove all score
		}
	)

	// keep updating
	while ( true )
	{
		results.team = player.GetTeam()
		results.score = file.ffaPlayerScore[ player ]

		WaitFrame()
	}
}